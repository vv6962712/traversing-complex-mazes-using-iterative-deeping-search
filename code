import numpy as np
import matplotlib.pyplot as plt
from random import randint

# Initialize the maze
maze_height, maze_width = 10, 15
maze = np.full((maze_height, maze_width), ' ', dtype=object)  # Use object dtype for mixed types
maze[0, :] = maze[-1, :] = maze[:, 0] = maze[:, -1] = '\u2588'  # Thick border walls

# Set player, checkpoint, and goal positions
player_position = (randint(1, maze_height - 2), randint(1, maze_width - 2))
goal_position = (randint(1, maze_height - 2), randint(1, maze_width - 2))
checkpoint_pos = []

# Ensure player, checkpoints, and goal don't overlap
while goal_position == player_position or goal_position in checkpoint_pos:
    goal_position = (randint(1, maze_height - 2), randint(1, maze_width - 2))

maze[player_position] = 'P'
maze[goal_position] = 'G'

# Generate checkpoints ensuring they don't come together
def generate_checkpoints(num_checkpoints):
    for _ in range(num_checkpoints):
        checkpoint_candidate = (randint(1, maze_height - 2), randint(1, maze_width - 2))
        while checkpoint_candidate in checkpoint_pos or any(abs(checkpoint_candidate[0] - cp[0]) <= 1 and abs(checkpoint_candidate[1] - cp[1]) <= 1 for cp in checkpoint_pos):
            checkpoint_candidate = (randint(1, maze_height - 2), randint(1, maze_width - 2))
        checkpoint_pos.append(checkpoint_candidate)

generate_checkpoints(2)  # Adjust the number of checkpoints as needed

for c in checkpoint_pos:
    maze[c] = 'C'

# Add more walls inside the maze
for _ in range(30):  # Increased number of walls
